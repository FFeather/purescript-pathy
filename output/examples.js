// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $div$eq = function (dict) {
        return dict["/="];
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var showString = new Show(showStringImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var eqNumber = new Eq(refIneq, refEq);
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_35) {
        return function (_36) {
            return _35;
        };
    };
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Semigroup: Semigroup, 
        Eq: Eq, 
        Ring: Ring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Semigroupoid: Semigroupoid, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "-": $minus, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        "$": $dollar, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        showString: showString, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Data_Profunctor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
     *  | to `Type`.
     *  |
     *  | In other words, a `Profunctor` is a type constructor of two type
     *  | arguments, which is contravariant in its first argument and covariant
     *  | in its second argument.
     *  | 
     *  | The `dimap` function can be used to map functions over both arguments
     *  | simultaneously.
     *  |
     *  | A straightforward example of a profunctor is the function arrow `(->)`.
     *  |
     *  | Laws:
     *  | 
     *  | - Identity: `dimap id id = id`
     *  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
     */
    var Profunctor = function (dimap) {
        this.dimap = dimap;
    };
    var profunctorArr = new Profunctor(function (a2b) {
        return function (c2d) {
            return function (b2c) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(a2b)(Prelude[">>>"](Prelude.semigroupoidArr)(b2c)(c2d));
            };
        };
    });
    return {
        Profunctor: Profunctor, 
        profunctorArr: profunctorArr
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    
    /**
     *  | Takes two functions and an `Either` value, if the value is a `Left` the
     *  | inner value is applied to the first function, if the value is a `Right`
     *  | the inner value is applied to the second function.
     *  |
     *  | ``` purescript
     *  | either f g (Left x) == f x
     *  | either f g (Right y) == g y
     *  | ```
     */
    var either = function (_91) {
        return function (_92) {
            return function (_93) {
                if (_93 instanceof Left) {
                    return _91(_93.value0);
                };
                if (_93 instanceof Right) {
                    return _92(_93.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        Left: Left, 
        Right: Right, 
        either: either
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    
    /**
     *  | Takes a default value, a function, and a `Maybe` value. If the `Maybe`
     *  | value is `Nothing` the default value is returned, otherwise the function
     *  | is applied to the value inside the `Just` and the result is returned.
     *  |
     *  | ``` purescript
     *  | maybe x f Nothing == x
     *  | maybe x f (Just y) == f y
     *  | ```
     */
    var maybe = function (_111) {
        return function (_112) {
            return function (_113) {
                if (_113 instanceof Nothing) {
                    return _111;
                };
                if (_113 instanceof Just) {
                    return _112(_113.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Just` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing == Nothing
     *  | ```
     */
    var functorMaybe = new Prelude.Functor(function (_114) {
        return function (_115) {
            if (_115 instanceof Just) {
                return new Just(_114(_115.value0));
            };
            return Nothing.value;
        };
    });
    
    /**
     *  | The `Apply` instance allows functions contained within a `Just` to
     *  | transform a value contained within a `Just` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Just f <*> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Just f <*> Nothing == Nothing
     *  | Nothing <*> Just x == Nothing
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Maybe`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Maybe a -> Maybe b -> Maybe c`:
     *  |
     *  | ``` purescript
     *  | f <$> Just x <*> Just y == Just (f x y)
     *  | ```
     *  |
     *  | The `Nothing`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Nothing`
     *  | means the whole result becomes `Nothing` also:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing <*> Just y == Nothing
     *  | f <$> Just x <*> Nothing == Nothing
     *  | f <$> Nothing <*> Nothing == Nothing
     *  | ```
     */
    var applyMaybe = new Prelude.Apply(function (_116) {
        return function (_117) {
            if (_116 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_116.value0)(_117);
            };
            if (_116 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Maybe` values and functions that
     *  | return a `Maybe` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Just x >>= f = f x
     *  | Nothing >>= f = Nothing
     *  | ```
     */
    var bindMaybe = new Prelude.Bind(function (_120) {
        return function (_121) {
            if (_120 instanceof Just) {
                return _121(_120.value0);
            };
            if (_120 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    return {
        filter: filter
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
    /**
     *  | A partial function that extracts the value from the `Just` data
     *  | constructor. Passing `Nothing` to `fromJust` will throw an error at
     *  | runtime.
     */
    var fromJust = function (_150) {
        if (_150 instanceof Data_Maybe.Just) {
            return _150.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | A simple product type for wrapping a pair of component values.
     */
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    
    /**
     *  | Returns the second component of a tuple.
     */
    var snd = function (_235) {
        return _235.value1;
    };
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Tuple` with the `<$>` operator, applying the function to the second
     *  | component, so:
     *  | ```purescript
     *  | f <$> (Tuple x y) = Tuple x (f y)
     *  | ````
     */
    var functorTuple = new Prelude.Functor(function (_249) {
        return function (_250) {
            return new Tuple(_250.value0, _249(_250.value1));
        };
    });
    
    /**
     *  | Returns the first component of a tuple.
     */
    var fst = function (_234) {
        return _234.value0;
    };
    return {
        Tuple: Tuple, 
        snd: snd, 
        fst: fst, 
        functorTuple: functorTuple
    };
})();
var PS = PS || {};
PS.Data_Profunctor_Strong = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Profunctor = PS.Data_Profunctor;
    var Data_Tuple = PS.Data_Tuple;
    
    /**
     *  | The `Strong` class extends `Profunctor` with combinators for working with
     *  | product types.
     *  |
     *  | `first` and `first` lift values in a `Profunctor` to act on the first and 
     *  | second components of a `Tuple`, respectively.
     *  |
     */
    var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
        this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
        this.first = first;
        this.second = second;
    };
    var strongArr = new Strong(function () {
        return Data_Profunctor.profunctorArr;
    }, function (_308) {
        return function (_309) {
            return new Data_Tuple.Tuple(_308(_309.value0), _309.value1);
        };
    }, Prelude["<$>"](Data_Tuple.functorTuple));
    
    /**
     *  | The `Strong` class extends `Profunctor` with combinators for working with
     *  | product types.
     *  |
     *  | `first` and `first` lift values in a `Profunctor` to act on the first and 
     *  | second components of a `Tuple`, respectively.
     *  |
     */
    var first = function (dict) {
        return dict.first;
    };
    return {
        Strong: Strong, 
        first: first, 
        strongArr: strongArr
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    return {
        joinWith: joinWith, 
        split: split, 
        drop: drop, 
        take: take, 
        lastIndexOf: lastIndexOf
    };
})();
var PS = PS || {};
PS.Data_Path_Pathy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Profunctor_Strong = PS.Data_Profunctor_Strong;
    var Data_Foldable = PS.Data_Foldable;
    var Control_Alt = PS.Control_Alt;
    var Data_List = PS.Data_List;
    
    /**
     *  | A newtype around a file name.
     */
    var FileName = function (x) {
        return x;
    };
    
    /**
     *  | Escapers encode segments or characters which have reserved meaning.
     */
    var Escaper = function (x) {
        return x;
    };
    
    /**
     *  | A newtype around a directory name.
     */
    var DirName = function (x) {
        return x;
    };
    
    /**
     *  | A type that describes a Path. All flavors of paths are described by this 
     *  | type, whether they are absolute or relative paths, whether they 
     *  | refer to files or directories, whether they are sandboxed or not.
     *  | 
     *  | * The type parameter `a` describes whether the path is `Rel` or `Abs`.
     *  | * The type parameter `b` describes whether the path is `File` or `Dir`.
     *  | * The type parameter `s` describes whether the path is `Sandboxed` or `Unsandboxed`.
     *  |
     *  | To ensure type safety, there is no way for users to create a value of 
     *  | this type directly. Instead, helpers should be used, such as `rootDir`,
     *  | `currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.
     *  | 
     *  | This ADT allows invalid paths (e.g. paths inside files), but there is no
     *  | possible way for such paths to be constructed by user-land code. The only
     *  | "invalid path" that may be constructed is using the `parentDir'` function, e.g.
     *  | `parentDir' rootDir`, or by parsing an equivalent string such as `/../`, 
     *  | but such paths are marked as unsandboxed, and may not be rendered to strings
     *  | until they are first sandboxed to some directory.
     */
    var Current = (function () {
        function Current() {

        };
        Current.value = new Current();
        return Current;
    })();
    
    /**
     *  | A type that describes a Path. All flavors of paths are described by this 
     *  | type, whether they are absolute or relative paths, whether they 
     *  | refer to files or directories, whether they are sandboxed or not.
     *  | 
     *  | * The type parameter `a` describes whether the path is `Rel` or `Abs`.
     *  | * The type parameter `b` describes whether the path is `File` or `Dir`.
     *  | * The type parameter `s` describes whether the path is `Sandboxed` or `Unsandboxed`.
     *  |
     *  | To ensure type safety, there is no way for users to create a value of 
     *  | this type directly. Instead, helpers should be used, such as `rootDir`,
     *  | `currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.
     *  | 
     *  | This ADT allows invalid paths (e.g. paths inside files), but there is no
     *  | possible way for such paths to be constructed by user-land code. The only
     *  | "invalid path" that may be constructed is using the `parentDir'` function, e.g.
     *  | `parentDir' rootDir`, or by parsing an equivalent string such as `/../`, 
     *  | but such paths are marked as unsandboxed, and may not be rendered to strings
     *  | until they are first sandboxed to some directory.
     */
    var Root = (function () {
        function Root() {

        };
        Root.value = new Root();
        return Root;
    })();
    
    /**
     *  | A type that describes a Path. All flavors of paths are described by this 
     *  | type, whether they are absolute or relative paths, whether they 
     *  | refer to files or directories, whether they are sandboxed or not.
     *  | 
     *  | * The type parameter `a` describes whether the path is `Rel` or `Abs`.
     *  | * The type parameter `b` describes whether the path is `File` or `Dir`.
     *  | * The type parameter `s` describes whether the path is `Sandboxed` or `Unsandboxed`.
     *  |
     *  | To ensure type safety, there is no way for users to create a value of 
     *  | this type directly. Instead, helpers should be used, such as `rootDir`,
     *  | `currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.
     *  | 
     *  | This ADT allows invalid paths (e.g. paths inside files), but there is no
     *  | possible way for such paths to be constructed by user-land code. The only
     *  | "invalid path" that may be constructed is using the `parentDir'` function, e.g.
     *  | `parentDir' rootDir`, or by parsing an equivalent string such as `/../`, 
     *  | but such paths are marked as unsandboxed, and may not be rendered to strings
     *  | until they are first sandboxed to some directory.
     */
    var ParentIn = (function () {
        function ParentIn(value0) {
            this.value0 = value0;
        };
        ParentIn.create = function (value0) {
            return new ParentIn(value0);
        };
        return ParentIn;
    })();
    
    /**
     *  | A type that describes a Path. All flavors of paths are described by this 
     *  | type, whether they are absolute or relative paths, whether they 
     *  | refer to files or directories, whether they are sandboxed or not.
     *  | 
     *  | * The type parameter `a` describes whether the path is `Rel` or `Abs`.
     *  | * The type parameter `b` describes whether the path is `File` or `Dir`.
     *  | * The type parameter `s` describes whether the path is `Sandboxed` or `Unsandboxed`.
     *  |
     *  | To ensure type safety, there is no way for users to create a value of 
     *  | this type directly. Instead, helpers should be used, such as `rootDir`,
     *  | `currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.
     *  | 
     *  | This ADT allows invalid paths (e.g. paths inside files), but there is no
     *  | possible way for such paths to be constructed by user-land code. The only
     *  | "invalid path" that may be constructed is using the `parentDir'` function, e.g.
     *  | `parentDir' rootDir`, or by parsing an equivalent string such as `/../`, 
     *  | but such paths are marked as unsandboxed, and may not be rendered to strings
     *  | until they are first sandboxed to some directory.
     */
    var DirIn = (function () {
        function DirIn(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        DirIn.create = function (value0) {
            return function (value1) {
                return new DirIn(value0, value1);
            };
        };
        return DirIn;
    })();
    
    /**
     *  | A type that describes a Path. All flavors of paths are described by this 
     *  | type, whether they are absolute or relative paths, whether they 
     *  | refer to files or directories, whether they are sandboxed or not.
     *  | 
     *  | * The type parameter `a` describes whether the path is `Rel` or `Abs`.
     *  | * The type parameter `b` describes whether the path is `File` or `Dir`.
     *  | * The type parameter `s` describes whether the path is `Sandboxed` or `Unsandboxed`.
     *  |
     *  | To ensure type safety, there is no way for users to create a value of 
     *  | this type directly. Instead, helpers should be used, such as `rootDir`,
     *  | `currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.
     *  | 
     *  | This ADT allows invalid paths (e.g. paths inside files), but there is no
     *  | possible way for such paths to be constructed by user-land code. The only
     *  | "invalid path" that may be constructed is using the `parentDir'` function, e.g.
     *  | `parentDir' rootDir`, or by parsing an equivalent string such as `/../`, 
     *  | but such paths are marked as unsandboxed, and may not be rendered to strings
     *  | until they are first sandboxed to some directory.
     */
    var FileIn = (function () {
        function FileIn(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        FileIn.create = function (value0) {
            return function (value1) {
                return new FileIn(value0, value1);
            };
        };
        return FileIn;
    })();
    
    /**
     *  | Given a directory path, appends either a file or directory to the path.
     */
    var $less$div$greater = function (_625) {
        return function (_626) {
            if (_625 instanceof Current && _626 instanceof Current) {
                return Current.value;
            };
            if (_625 instanceof Root && _626 instanceof Current) {
                return Root.value;
            };
            if (_625 instanceof ParentIn && _626 instanceof Current) {
                return new ParentIn($less$div$greater(_625.value0)(Current.value));
            };
            if (_625 instanceof FileIn && _626 instanceof Current) {
                return new FileIn($less$div$greater(_625.value0)(Current.value), _625.value1);
            };
            if (_625 instanceof DirIn && _626 instanceof Current) {
                return new DirIn($less$div$greater(_625.value0)(Current.value), _625.value1);
            };
            if (_625 instanceof Current && _626 instanceof Root) {
                return Current.value;
            };
            if (_625 instanceof Root && _626 instanceof Root) {
                return Root.value;
            };
            if (_625 instanceof ParentIn && _626 instanceof Root) {
                return new ParentIn($less$div$greater(_625.value0)(Current.value));
            };
            if (_625 instanceof FileIn && _626 instanceof Root) {
                return new FileIn($less$div$greater(_625.value0)(Current.value), _625.value1);
            };
            if (_625 instanceof DirIn && _626 instanceof Root) {
                return new DirIn($less$div$greater(_625.value0)(Current.value), _625.value1);
            };
            if (_626 instanceof ParentIn) {
                return new ParentIn($less$div$greater(_625)(_626.value0));
            };
            if (_626 instanceof FileIn) {
                return new FileIn($less$div$greater(_625)(_626.value0), _626.value1);
            };
            if (_626 instanceof DirIn) {
                return new DirIn($less$div$greater(_625)(_626.value0), _626.value1);
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Unsandboxes any path (whether sandboxed or not).
     */
    var unsandbox = function (_629) {
        if (_629 instanceof Current) {
            return Current.value;
        };
        if (_629 instanceof Root) {
            return Root.value;
        };
        if (_629 instanceof ParentIn) {
            return new ParentIn(unsandbox(_629.value0));
        };
        if (_629 instanceof DirIn) {
            return new DirIn(unsandbox(_629.value0), _629.value1);
        };
        if (_629 instanceof FileIn) {
            return new FileIn(unsandbox(_629.value0), _629.value1);
        };
        throw new Error("Failed pattern match");
    };
    var unsafePrintPath$prime = function (r) {
        return function (p) {
            var go = function (_634) {
                if (_634 instanceof Current) {
                    return "./";
                };
                if (_634 instanceof Root) {
                    return "/";
                };
                if (_634 instanceof ParentIn) {
                    return go(_634.value0) + "../";
                };
                if (_634 instanceof DirIn && _634.value0 instanceof FileIn) {
                    return go(_634.value0) + ("/" + (_634.value1 + "/"));
                };
                if (_634 instanceof DirIn) {
                    return go(_634.value0) + (_634.value1 + "/");
                };
                if (_634 instanceof FileIn && _634.value0 instanceof FileIn) {
                    return go(_634.value0) + ("/" + _634.value1);
                };
                if (_634 instanceof FileIn) {
                    return go(_634.value0) + _634.value1;
                };
                throw new Error("Failed pattern match");
            };
            return go(p);
        };
    };
    var showPath = new Prelude.Show(function (_638) {
        if (_638 instanceof Current) {
            return "currentDir";
        };
        if (_638 instanceof Root) {
            return "rootDir";
        };
        if (_638 instanceof ParentIn) {
            return "(parentDir' " + (Prelude.show(showPath)(_638.value0) + ")");
        };
        if (_638 instanceof FileIn) {
            return Prelude.show(showPath)(_638.value0) + ("(file " + (_638.value1 + ")"));
        };
        if (_638 instanceof DirIn) {
            return Prelude.show(showPath)(_638.value0) + ("(dir " + (_638.value1 + ")"));
        };
        throw new Error("Failed pattern match");
    });
    
    /**
     *  | Given an escaper and a segment to encode, returns the encoded segment.
     */
    var runEscaper = function (_619) {
        return _619;
    };
    
    /**
     *  | The root directory, which can be used to define absolutely-located resources.
     */
    var rootDir = Root.value;
    
    /**
     *  | Renames a file path.
     */
    var renameFile = function (f) {
        var go = function (_632) {
            if (_632 instanceof FileIn) {
                return new FileIn(_632.value0, f(_632.value1));
            };
            return _632;
        };
        return go;
    };
    
    /**
     *  | An escaper that does nothing except remove slashes (the bare minimum of
     *  | what must be done).
     */
    var nonEscaper = Escaper(function (s) {
        return Data_String.joinWith("")(Data_Array.filter(Prelude["/="](Prelude.eqString)("/"))(Data_String.split("")(s)));
    });
    
    /**
     *  | An escaper that removes all slashes, converts ".." into "$dot$dot", and
     *  | converts "." into "$dot".
     */
    var posixEscaper = Escaper(Prelude[">>>"](Prelude.semigroupoidArr)(runEscaper(nonEscaper))(function (s) {
        var _724 = s === "..";
        if (_724) {
            return "$dot$dot";
        };
        if (!_724) {
            var _725 = s === ".";
            if (_725) {
                return "$dot";
            };
            if (!_725) {
                return s;
            };
            throw new Error("Failed pattern match");
        };
        throw new Error("Failed pattern match");
    }));
    var unsafePrintPath = unsafePrintPath$prime(posixEscaper);
    
    /**
     *  | Determines if this path is absolutely located.
     */
    var isAbsolute = function (__copy__627) {
        var _627 = __copy__627;
        tco: while (true) {
            if (_627 instanceof Current) {
                return false;
            };
            if (_627 instanceof Root) {
                return true;
            };
            if (_627 instanceof ParentIn) {
                var __tco__627 = _627.value0;
                _627 = __tco__627;
                continue tco;
            };
            if (_627 instanceof FileIn) {
                var __tco__627 = _627.value0;
                _627 = __tco__627;
                continue tco;
            };
            if (_627 instanceof DirIn) {
                var __tco__627 = _627.value0;
                _627 = __tco__627;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Peels off the last directory and the terminal file or directory name 
     *  | from the path. Returns `Nothing` if there is no such pair (for example, 
     *  | if the last path segment is root directory, current directory, or parent 
     *  | directory).
     */
    var peel = function (_628) {
        if (_628 instanceof Current) {
            return Data_Maybe.Nothing.value;
        };
        if (_628 instanceof Root) {
            return Data_Maybe.Nothing.value;
        };
        if (_628 instanceof ParentIn) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(peel(_628.value0))(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Tuple.fst)(peel));
        };
        if (_628 instanceof DirIn) {
            var d$prime = new Data_Either.Left(_628.value1);
            return Data_Maybe.Just.create(Data_Maybe.maybe((function () {
                var _734 = isAbsolute(_628.value0);
                if (_734) {
                    return new Data_Tuple.Tuple(Root.value, d$prime);
                };
                if (!_734) {
                    return new Data_Tuple.Tuple(Current.value, d$prime);
                };
                throw new Error("Failed pattern match");
            })())(function (_614) {
                return new Data_Tuple.Tuple(Data_Either.either(DirIn.create(_614.value0))(FileIn.create(_614.value0))(_614.value1), d$prime);
            })(peel(_628.value0)));
        };
        if (_628 instanceof FileIn) {
            var f$prime = new Data_Either.Right(_628.value1);
            return Data_Maybe.Just.create(Data_Maybe.maybe((function () {
                var _740 = isAbsolute(_628.value0);
                if (_740) {
                    return new Data_Tuple.Tuple(Root.value, f$prime);
                };
                if (!_740) {
                    return new Data_Tuple.Tuple(Current.value, f$prime);
                };
                throw new Error("Failed pattern match");
            })())(function (_615) {
                return new Data_Tuple.Tuple(Data_Either.either(DirIn.create(_615.value0))(FileIn.create(_615.value0))(_615.value1), f$prime);
            })(peel(_628.value0)));
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Extracts out the parent directory of the specified path. Will use the 
     *  | parent path segment (..) if strictly necessary and therefore can escape 
     *  | a sandboxed path.
     */
    var parentDir$prime = function (_630) {
        if (_630 instanceof Current) {
            return new ParentIn(Current.value);
        };
        if (_630 instanceof Root) {
            return new ParentIn(Root.value);
        };
        if (_630 instanceof ParentIn) {
            return new ParentIn(parentDir$prime(_630.value0));
        };
        if (_630 instanceof FileIn) {
            return Data_Maybe.maybe((function () {
                var _748 = isAbsolute(_630.value0);
                if (_748) {
                    return Root.value;
                };
                if (!_748) {
                    return Current.value;
                };
                throw new Error("Failed pattern match");
            })())(function (_616) {
                return Data_Either.either(DirIn.create(_616.value0))(FileIn.create(_616.value0))(_616.value1);
            })(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongArr)(unsandbox))(peel(_630.value0)));
        };
        if (_630 instanceof DirIn) {
            return Data_Maybe.maybe((function () {
                var _754 = isAbsolute(_630.value0);
                if (_754) {
                    return Root.value;
                };
                if (!_754) {
                    return Current.value;
                };
                throw new Error("Failed pattern match");
            })())(function (_617) {
                return Data_Either.either(DirIn.create(_617.value0))(FileIn.create(_617.value0))(_617.value1);
            })(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongArr)(unsandbox))(peel(_630.value0)));
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Determines if two paths have the exact same representation. Note that 
     *  | two paths may represent the same path even if they have different 
     *  | representations!
     */
    var identicalPath = function (p1) {
        return function (p2) {
            return Prelude.show(showPath)(p1) === Prelude.show(showPath)(p2);
        };
    };
    
    /**
     *  | Creates a path which points to a relative file of the specified name.
     */
    var file$prime = function (f) {
        return new FileIn(Current.value, f);
    };
    
    /**
     *  | Creates a path which points to a relative file of the specified name.
     */
    var file = function (f) {
        return file$prime(f);
    };
    
    /**
     *  | Retrieves the extension of a file name.
     */
    var extension = function (_621) {
        var idx = Data_String.lastIndexOf(".")(_621);
        var _761 = idx === -1;
        if (_761) {
            return "";
        };
        if (!_761) {
            return Data_String.drop(idx + 1)(_621);
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Drops the extension on a file name.
     */
    var dropExtension = function (_622) {
        var idx = Data_String.lastIndexOf(".")(_622);
        var _763 = idx === -1;
        if (_763) {
            return _622;
        };
        if (!_763) {
            return FileName(Data_String.take(idx)(_622));
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Creates a path which points to a relative directory of the specified name.
     */
    var dir$prime = function (d) {
        return new DirIn(Current.value, d);
    };
    
    /**
     *  | Creates a path which points to a relative directory of the specified name.
     */
    var dir = function (d) {
        return dir$prime(d);
    };
    
    /**
     *  | Changes the extension on a file name.
     */
    var changeExtension = function (_623) {
        return function (_624) {
            var ext = _623(extension(_624));
            return (function (_613) {
                var _767 = ext === "";
                if (_767) {
                    return _613;
                };
                if (!_767) {
                    return FileName(_613 + ("." + ext));
                };
                throw new Error("Failed pattern match");
            })(dropExtension(_624));
        };
    };
    
    /**
     *  | Sets the extension of the file to the specified extension.
     *  |
     *  | ```purescript
     *  | file "image" <.> "png"
     *  | ```
     */
    var $less$dot$greater = function (p) {
        return function (ext) {
            return renameFile(changeExtension(Prelude["const"](ext)))(p);
        };
    };
    
    /**
     *  | Canonicalizes a path and returns information on whether or not it actually changed.
     */
    var canonicalize$prime = function (_631) {
        if (_631 instanceof Current) {
            return new Data_Tuple.Tuple(false, Current.value);
        };
        if (_631 instanceof Root) {
            return new Data_Tuple.Tuple(false, Root.value);
        };
        if (_631 instanceof ParentIn && _631.value0 instanceof FileIn) {
            return new Data_Tuple.Tuple(true, _631.value0.value0);
        };
        if (_631 instanceof ParentIn && _631.value0 instanceof DirIn) {
            return new Data_Tuple.Tuple(true, _631.value0.value0);
        };
        if (_631 instanceof ParentIn) {
            return (function (_618) {
                var p$prime$prime = new ParentIn(_618.value1);
                if (_618.value0) {
                    return canonicalize$prime(p$prime$prime);
                };
                if (!_618.value0) {
                    return new Data_Tuple.Tuple(_618.value0, p$prime$prime);
                };
                throw new Error("Failed pattern match");
            })(canonicalize$prime(_631.value0));
        };
        if (_631 instanceof FileIn) {
            return Prelude["<$>"](Data_Tuple.functorTuple)(Prelude.flip(FileIn.create)(_631.value1))(canonicalize$prime(_631.value0));
        };
        if (_631 instanceof DirIn) {
            return Prelude["<$>"](Data_Tuple.functorTuple)(Prelude.flip(DirIn.create)(_631.value1))(canonicalize$prime(_631.value0));
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Canonicalizes a path, by reducing things in the form `/x/../` to just `/x/`.
     */
    var canonicalize = function (p) {
        return Data_Tuple.snd(canonicalize$prime(p));
    };
    
    /**
     *  | Makes one path relative to another reference path, if possible, otherwise 
     *  | returns `Nothing`. The returned path inherits the sandbox settings of the 
     *  | reference path.
     *  | 
     *  | Note there are some cases this function cannot handle. 
     */
    var relativeTo = function (p1) {
        return function (p2) {
            var relativeTo$prime = function (p1_1) {
                return function (p2_1) {
                    var _784 = identicalPath(p1_1)(p2_1);
                    if (_784) {
                        return new Data_Maybe.Just(Current.value);
                    };
                    if (!_784) {
                        var _785 = peel(p1_1);
                        if (_785 instanceof Data_Maybe.Nothing) {
                            var _786 = new Data_Tuple.Tuple(p1_1, p2_1);
                            if (_786.value0 instanceof Root && _786.value1 instanceof Root) {
                                return new Data_Maybe.Just(Current.value);
                            };
                            if (_786.value0 instanceof Current && _786.value1 instanceof Current) {
                                return new Data_Maybe.Just(Current.value);
                            };
                            return Data_Maybe.Nothing.value;
                        };
                        if (_785 instanceof Data_Maybe.Just) {
                            return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude.flip($less$div$greater)(Data_Either.either(DirIn.create(Current.value))(FileIn.create(Current.value))(_785.value0.value1)))(relativeTo$prime(_785.value0.value0)(p2_1));
                        };
                        throw new Error("Failed pattern match");
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return relativeTo$prime(canonicalize(p1))(canonicalize(p2));
        };
    };
    
    /**
     *  | Attempts to sandbox a path relative to some directory. If successful, the sandboxed 
     *  | directory will be returned relative to the sandbox directory (although this can easily
     *  | be converted into an absolute path using `</>`).
     *  | 
     *  | This combinator can be used to ensure that paths which originate from user-code
     *  | cannot access data outside a given directory.
     */
    var sandbox = function (p1) {
        return function (p2) {
            return relativeTo(p2)(p1);
        };
    };
    return {
        FileName: FileName, 
        Escaper: Escaper, 
        DirName: DirName, 
        "unsafePrintPath'": unsafePrintPath$prime, 
        unsafePrintPath: unsafePrintPath, 
        unsandbox: unsandbox, 
        sandbox: sandbox, 
        runEscaper: runEscaper, 
        rootDir: rootDir, 
        renameFile: renameFile, 
        relativeTo: relativeTo, 
        posixEscaper: posixEscaper, 
        peel: peel, 
        "parentDir'": parentDir$prime, 
        isAbsolute: isAbsolute, 
        identicalPath: identicalPath, 
        "file'": file$prime, 
        file: file, 
        extension: extension, 
        dropExtension: dropExtension, 
        "dir'": dir$prime, 
        dir: dir, 
        changeExtension: changeExtension, 
        canonicalize: canonicalize, 
        "<.>": $less$dot$greater, 
        "</>": $less$div$greater, 
        showPath: showPath
    };
})();
var PS = PS || {};
PS.Examples = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Debug_Trace = PS.Debug_Trace;
    var Data_Path_Pathy = PS.Data_Path_Pathy;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var test = function (__dict_Show_520) {
        return function (__dict_Eq_521) {
            return function (name) {
                return function (expected) {
                    return function (actual) {
                        return function __do() {
                            Debug_Trace.trace("Test: " + name)();
                            var _794 = Prelude["=="](__dict_Eq_521)(expected)(actual);
                            if (_794) {
                                return Debug_Trace.trace("Passed: " + Prelude.show(__dict_Show_520)(expected))();
                            };
                            if (!_794) {
                                return Debug_Trace.trace("Failed: Expected " + (Prelude.show(__dict_Show_520)(expected) + (" but found " + Prelude.show(__dict_Show_520)(actual))))();
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
    };
    var test$prime = function (n) {
        return function (p) {
            return function (s) {
                return test(Prelude.showString)(Prelude.eqString)(n)(Data_Path_Pathy.unsafePrintPath(p))(s);
            };
        };
    };
    var main = function __do() {
        Debug_Trace.trace("NEW TEST")();
        test$prime("(</>) - two directories")(Data_Path_Pathy["</>"](Data_Path_Pathy.dir("foo"))(Data_Path_Pathy.dir("bar")))("./foo/bar/")();
        test$prime("(</>) - file with two parents")(Data_Path_Pathy["</>"](Data_Path_Pathy["</>"](Data_Path_Pathy.dir("foo"))(Data_Path_Pathy.dir("bar")))(Data_Path_Pathy.file("image.png")))("./foo/bar/image.png")();
        test$prime("(<.>) - file without extension")(Data_Path_Pathy["<.>"](Data_Path_Pathy.file("image"))("png"))("./image.png")();
        test$prime("(<.>) - file with extension")(Data_Path_Pathy["<.>"](Data_Path_Pathy.file("image.jpg"))("png"))("./image.png")();
        test$prime("canonicalize - 1 down, 1 up")(Data_Path_Pathy.canonicalize(Data_Path_Pathy["parentDir'"](Data_Path_Pathy.dir("foo"))))("./")();
        test$prime("canonicalize - 2 down, 2 up")(Data_Path_Pathy.canonicalize(Data_Path_Pathy["parentDir'"](Data_Path_Pathy["parentDir'"](Data_Path_Pathy["</>"](Data_Path_Pathy.dir("foo"))(Data_Path_Pathy.dir("bar"))))))("./")();
        test$prime("renameFile - single level deep")(Data_Path_Pathy.renameFile(Data_Path_Pathy.dropExtension)(Data_Path_Pathy.file("image.png")))("./image")();
        return test$prime("sandbox - sandbox absolute dir to one level higher")(Data_Maybe_Unsafe.fromJust(Data_Path_Pathy.sandbox(Data_Path_Pathy["</>"](Data_Path_Pathy.rootDir)(Data_Path_Pathy.dir("foo")))(Data_Path_Pathy["</>"](Data_Path_Pathy["</>"](Data_Path_Pathy.rootDir)(Data_Path_Pathy.dir("foo")))(Data_Path_Pathy.dir("bar")))))("./bar/")();
    };
    return {
        main: main, 
        "test'": test$prime, 
        test: test
    };
})();
PS.Examples.main();
